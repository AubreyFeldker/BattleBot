/* eslint-disable max-len */

//GitHub Token: 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
const config = {
  token: 'NTA5MTY1NzAxMzcwNDc4NjEy.GhTQ4U.JnHEmjvpJou0GE6BBmp5QZ7uhb5ZOrY5B2YRSc',

  // Twitter
  twitterAPIKey: 'T5580wZpmQqJZOPp4lInaMgBb',
  twitterAPISecret: 'Hi5HbExIX7ZgbfBwhxLCPDa0eOCIqtqiDCMepSsGaGIPxsv9R0',
  twitterBearerToken: 'AAAAAAAAAAAAAAAAAAAAAPlsKgEAAAAARDGhKu%2Fgilq5ZcDuB9vUlPQMXp8%3DS5eW0YboWlQzxTVeo5yII3Pj9t6hEdcigAdOt8SvJn1LRHzdv3',
  twitterAccessToken: '1117442207890530305-GZ6MwnPTRhgEs8pThPLDnMQ1HAVemf',
  twitterAccessTokenSecret: '0KPOsJYqOqo6tQhsl3sX9hHmrbIbLgka7fVN8Xnf3vgby',
  followedTwitterUsers: ['719060622432956417', '3321223983', '958837765335957504', '1091102533257388032', '1235524285420015617', '850982139143233536', '1117829979742642182', '306490355'],

  affiliateUsers: ['719060622432956417', '3321223983', '833790325', '850982139143233536', '1117829979742642182'],
  officialUsers: ['958837765335957504', '1235524285420015617', '1091102533257388032'],

  // Webhooks
  twitterHookAffiliateID: '787520097043873803',
  twitterHookAffiliateToken: 'pHq0FZOh5-S_dDr_R1oZkzSdubfRO3xNggr9Zb7fm8yX1eBaS9cr_f_Cpul9lHjzOzhf',
  twitterHookOfficialID: '787521770923753492',
  twitterHookOfficialToken: 'W7LLrjxighBJ5hBC2voIPzxBsoZ8wD-IWLbt0fCi1gGUXofENqd1yPXSZL4cIcG7EJLB',
  monsterHunterID: '972344656467734548',
  monsterHunterOfficialToken: 'KmS96OU0sqN_VkMyVarHiRVjNCBRsKDI5XpzTRq1lqAPFnSA0Fuq5My6mKZeGEwO53Id',

  // Settings
  defaultSettings: {
    prefix: '.',
    modRole: 'Moderator',
    adminRole: 'Admin',
  },

  factionSettings: {
    chars: [],
    roles: [],
    emoji: [],
    oneups: {},
    teamSwitch: true,
    ongoingBattle: false,
  },

  teamSettings: {
    teams: [],
    unlockableTeams: [],
  },

  selfAssignRoles: [],

  // Bot Perms and Stuff
    ownerID: '220390422441230346',

  admins: [],

  support: [],
  
  // Emote Stuff
  emote_servers: [
  '710060835434922005',
  '783483849656369213',
  '749466162009604236',
  '783483957341716500',
  ],
  
  daily_starbits: 5000,

  // Guild Perms and Stuff
  permLevels: [
    {
      level: 0,
      name: 'User',
      check: () => true,
    },
    {
      level: 1,
      name: 'Verified',
      check: (client, message) => {
        const roles = [
          '391877990277185556',
          '751118834206769293',
          '751118889869377656',
          '751616251759165440',
          '754394768473194607',
          '754395250042208336',
          '754395466598187148',
          '754395863597711360',
          '751616457430925342',
          '751616582307807323',
          '751616793092817038',
        ];

        if (message.member.roles.cache.some((r) => roles.includes(r.id))) {
          return true;
        }
        return false;
      },
    },
    {
      level: 2,
      name: 'Mod',
      check: (client, message) => {
        const modRole = message.guild.roles.cache.find((r) => r.name.toLowerCase() === client.getSettings(message.guild).modRole.toLowerCase());

        if (modRole && message.member.roles.cache.has(modRole.id)) {
          return true;
        }
        return false;
      },
    },
    {
      level: 3,
      name: 'Admin',
      check: (client, message) => {
        const adminRole = message.guild.roles.cache.find((r) => r.name.toLowerCase() === client.getSettings(message.guild).adminRole.toLowerCase());

        if ((adminRole && message.member.roles.cache.has(adminRole.id)) || message.member.permissions.has('ADMINISTRATOR')) {
          return true;
        }
        return false;
      },
    },
    {
      level: 4,
      name: 'Server Owner',
      // eslint-disable-next-line consistent-return
      check: (client, message) => {
        if (message.channel.type === 'text') {
          if (message.author.id === message.guild.ownerID) {
            return true;
          }
          return false;
        }
      },
    },
    {
      level: 8,
      name: 'Bot Support',
      check: (client, message) => config.support.includes(message.author.id),
    },
    {
      level: 9,
      name: 'Bot Admin',
      check: (client, message) => config.admins.includes(message.author.id),
    },
    {
      level: 10,
      name: 'Bot Owner',
      check: (client, message) => config.ownerID === message.author.id,
    },
  ],
};

module.exports = config;
