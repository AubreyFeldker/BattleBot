"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
exports.__esModule = true;
exports.CollectablesInLevel = void 0;
var flatbuffers = require("flatbuffers");
var collectables_of_type_1 = require("../../penguin-game/serialization/collectables-of-type");
var CollectablesInLevel = /** @class */ (function () {
    function CollectablesInLevel() {
        this.bb = null;
        this.bb_pos = 0;
    }
    CollectablesInLevel.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    CollectablesInLevel.getRootAsCollectablesInLevel = function (bb, obj) {
        return (obj || new CollectablesInLevel()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    CollectablesInLevel.getSizePrefixedRootAsCollectablesInLevel = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new CollectablesInLevel()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    CollectablesInLevel.prototype.levelGuid = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    CollectablesInLevel.prototype.collectables = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? (obj || new collectables_of_type_1.CollectablesOfType()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    CollectablesInLevel.prototype.collectablesLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    CollectablesInLevel.startCollectablesInLevel = function (builder) {
        builder.startObject(2);
    };
    CollectablesInLevel.addLevelGuid = function (builder, levelGuidOffset) {
        builder.addFieldOffset(0, levelGuidOffset, 0);
    };
    CollectablesInLevel.addCollectables = function (builder, collectablesOffset) {
        builder.addFieldOffset(1, collectablesOffset, 0);
    };
    CollectablesInLevel.createCollectablesVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    CollectablesInLevel.startCollectablesVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    CollectablesInLevel.endCollectablesInLevel = function (builder) {
        var offset = builder.endObject();
        builder.requiredField(offset, 4); // level_guid
        return offset;
    };
    CollectablesInLevel.createCollectablesInLevel = function (builder, levelGuidOffset, collectablesOffset) {
        CollectablesInLevel.startCollectablesInLevel(builder);
        CollectablesInLevel.addLevelGuid(builder, levelGuidOffset);
        CollectablesInLevel.addCollectables(builder, collectablesOffset);
        return CollectablesInLevel.endCollectablesInLevel(builder);
    };
    return CollectablesInLevel;
}());
exports.CollectablesInLevel = CollectablesInLevel;
