// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class Collectable {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):Collectable {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCollectable(bb:flatbuffers.ByteBuffer, obj?:Collectable):Collectable {
  return (obj || new Collectable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCollectable(bb:flatbuffers.ByteBuffer, obj?:Collectable):Collectable {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Collectable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

collectableId():string|null
collectableId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
collectableId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startCollectable(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addCollectableId(builder:flatbuffers.Builder, collectableIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, collectableIdOffset, 0);
}

static endCollectable(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createCollectable(builder:flatbuffers.Builder, collectableIdOffset:flatbuffers.Offset):flatbuffers.Offset {
  Collectable.startCollectable(builder);
  Collectable.addCollectableId(builder, collectableIdOffset);
  return Collectable.endCollectable(builder);
}
}
